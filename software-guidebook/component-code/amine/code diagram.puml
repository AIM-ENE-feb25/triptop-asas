@startuml

package "Controller Layer" {
    class PaymentController {
        - PaymentService paymentService

        + ResponseEntity<String> createPayment(Map<String, Object> request)
        + ResponseEntity<String> confirmPayment(Map<String, Object> request)
    }
}

package "domain" {
    class PaymentDTO {
        + String currencyCode
        + double amount
    }
}

package "Service Layer" {
    class PaymentService {
        + handlePayment(paymentRequest: PaymentRequest): PaymentResponse
    }

}

package "Repository Layer" {
    interface PaymentRepository {
        + void savePayment(String paymentId, PaymentDTO paymentDTO)
        + void markPaymentAsPaid(String paymentId)
    }
    class PaymentRepositoryImpl  implements PaymentRepository {
        - JdbcTemplate jdbcTemplate

        + void savePayment(String paymentId, PaymentDTO paymentDTO)
        + void markPaymentAsPaid(String paymentId)
    }
}

package "Adapter Layer" {
interface PaymentPort {
        + String createPayment(PaymentDTO paymentDTO)
        + Boolean confirmPayment(String paymentId)
    }
    class StripeAdapter implements PaymentPort {
        - String clientId
        - String clientSecret
        - StripeClient client

        + void init()
        + String createPayment(PaymentDTO paymentDTO)
        + Boolean confirmPayment(String paymentId)
        + void configure()
    }

    class PaypalAdapter implements PaymentPort {
        - String OAuthClientId
        - String OAuthClientSecret
        - OrdersController ordersController
        - PaypalServerSdkClient client

        + void init()
        + String createPayment(PaymentDTO paymentDTO)
        + Boolean confirmPayment(String paymentId)
        + void configure()
    }


}

PaymentService --> PaymentPort
PaymentController --> PaymentService
PaymentService --> PaymentRepository
PaymentController --> PaymentDTO

@enduml